root = true

[*]
indent_style = space

# XML project files
[*.{csproj,vbproj,vcxproj,vcxproj.filters,proj,projitems,shproj}]
indent_size = 2

# XML config files
[*.{props,targets,ruleset,config,nuspec,resx,vsixmanifest,vsct}]
indent_size = 2

# Code files
[*.{cs,csx,vb,vbx}]
indent_size = 4
insert_final_newline = true
charset = utf-8

[*.cs]
# Prefer fields, properties, methods & events not to be prefaced with this
dotnet_style_qualification_for_field = false
dotnet_style_qualification_for_property = false
dotnet_style_qualification_for_method = false
dotnet_style_qualification_for_event = false
dotnet_style_predefined_type_for_locals_parameters_members = true
dotnet_style_predefined_type_for_member_access = true
csharp_preferred_modifier_order = public, private, protected, internal, static, extern, new, virtual, abstract, sealed, override, readonly, unsafe, volatile, async
dotnet_style_require_accessibility_modifiers = always
dotnet_style_readonly_field = true
csharp_prefer_static_local_function = true
dotnet_style_parentheses_in_arithmetic_binary_operators = always_for_clarity
dotnet_style_parentheses_in_relational_binary_operators = always_for_clarity
dotnet_style_parentheses_in_other_binary_operators = always_for_clarity
dotnet_style_parentheses_in_other_operators = always_for_clarity
dotnet_style_object_initializer = true
csharp_style_inlined_variable_declaration = true
dotnet_style_collection_initializer = false
dotnet_style_prefer_auto_properties = true
dotnet_style_explicit_tuple_names = true
csharp_prefer_simple_default_expression = true
dotnet_style_prefer_inferred_tuple_names = true
csharp_style_prefer_local_over_anonymous_function = false
csharp_style_deconstructed_variable_declaration = false
dotnet_style_prefer_conditional_expression_over_assignment = true
dotnet_style_prefer_conditional_expression_over_return = true
dotnet_style_prefer_compound_assignment = true
dotnet_style_prefer_simplified_boolean_expressions = true
csharp_style_implicit_object_creation_when_type_is_apparent = false
csharp_style_prefer_tuple_swap = false
csharp_style_namespace_declarations = file_scoped
csharp_style_throw_expression = true
dotnet_style_coalesce_expression = true
dotnet_style_null_propagation = true
dotnet_style_prefer_is_null_check_over_reference_equality_method = true
csharp_style_conditional_delegate_call = true
csharp_style_var_for_built_in_types = false
csharp_style_var_when_type_is_apparent = false
csharp_style_expression_bodied_constructors = false
csharp_style_expression_bodied_methods = true
csharp_style_expression_bodied_operators = when_on_single_line
csharp_style_expression_bodied_properties = when_on_single_line
csharp_style_expression_bodied_indexers = when_on_single_line
csharp_style_expression_bodied_accessors = when_on_single_line
csharp_style_expression_bodied_lambdas = when_on_single_line
csharp_style_expression_bodied_local_functions = false
csharp_style_pattern_matching_over_as_with_null_check = true
csharp_style_pattern_matching_over_is_with_cast_check = true
csharp_style_prefer_switch_expression = true
csharp_style_prefer_pattern_matching = true
csharp_style_prefer_not_pattern = true
csharp_prefer_braces = true
csharp_prefer_simple_using_statement = true
csharp_using_directive_placement = outside_namespace
dotnet_sort_system_directives_first = true
dotnet_separate_import_directive_groups = false
dotnet_style_namespace_match_folder = true
csharp_new_line_before_open_brace = methods, properties, control_blocks, types
csharp_new_line_before_else = false
csharp_new_line_before_catch = false
csharp_new_line_before_finally = false
csharp_new_line_before_members_in_object_initializers = true
csharp_new_line_before_members_in_anonymous_types = true
csharp_new_line_between_query_expression_clauses = true
csharp_indent_case_contents = true
csharp_indent_switch_labels = true
csharp_indent_labels = one_less_than_current
csharp_indent_block_contents = true
csharp_indent_braces = false
csharp_indent_case_contents_when_block = false
csharp_space_after_cast = false
csharp_space_after_keywords_in_control_flow_statements = true
csharp_space_between_parentheses = control_flow_statements, expressions
csharp_space_before_colon_in_inheritance_clause = true
csharp_space_after_colon_in_inheritance_clause = true
csharp_space_around_binary_operators = before_and_after
csharp_space_between_method_declaration_parameter_list_parentheses = false
csharp_space_between_method_declaration_empty_parameter_list_parentheses = false
csharp_space_between_method_declaration_name_and_open_parenthesis = false
csharp_space_between_method_call_parameter_list_parentheses = false
csharp_space_between_method_call_empty_parameter_list_parentheses = false
csharp_space_between_method_call_name_and_opening_parenthesis = false
csharp_space_after_comma = true
csharp_space_before_comma = false
csharp_space_after_dot = false
csharp_space_before_dot = false
csharp_space_after_semicolon_in_for_statement = true
csharp_space_before_semicolon_in_for_statement = false
csharp_space_around_declaration_statements = false
csharp_space_before_open_square_brackets = false
csharp_space_between_empty_square_brackets = false
csharp_space_between_square_brackets = false
csharp_preserve_single_line_statements = false
csharp_preserve_single_line_blocks = true

######################################################################
# Start by defining the naming symbols (groups) for fields...
######################################################################
# allowed by design guidelines, but naming is not specified by naming guidelines
dotnet_naming_symbols.private_fields.applicable_kinds = field
dotnet_naming_symbols.private_fields.applicable_accessibilities = private, internal, protected_internal

# allowed by design guidelines, and naming guidelines indicate PascalCasing
dotnet_naming_symbols.public_constant_fields.applicable_kinds = field
dotnet_naming_symbols.public_constant_fields.required_modifiers = const
dotnet_naming_symbols.public_constant_fields.applicable_accessibilities = public, protected

dotnet_naming_symbols.public_static_readonly_fields.applicable_kinds = field
dotnet_naming_symbols.public_static_readonly_fields.required_modifiers = static, readonly
dotnet_naming_symbols.public_static_readonly_fields.applicable_accessibilities = public, protected

# not allowed by design guidelines -- all fields unless match one of the above three naming symbols
dotnet_naming_symbols.fields.applicable_kinds = field

######################################################################
# Now define the styles that will be applied to those naming symbols...
######################################################################
# camel_case - Define the camelCase style
dotnet_naming_style.camel_case.capitalization = camel_case
# pascal_case - Define the Pascal_case style
dotnet_naming_style.pascal_case.capitalization = pascal_case
# prefix_with_underscore_pascal_case
dotnet_naming_style.prefix_interface_interface_with_i.capitalization = pascal_case

######################################################################
# Naming Rules are matched in the order listed, and only the first match is applied
# Use this to match allowed field types, then match all other field types with the invalid style
# Explicitly mark the field type that is user-preference, to allow simple changing to camelCase
# or other settings...
######################################################################
# Fields that are private can be formatted entirely by user preference
dotnet_naming_rule.private_fields_rule.symbols  = private_fields
dotnet_naming_rule.private_fields_rule.style    = prefix_with_underscore_pascal_case
dotnet_naming_rule.private_fields_rule.severity = warning

# Fields that are public constants must be PascalCase
dotnet_naming_rule.public_constant_fields_rule.symbols  = public_constant_fields
dotnet_naming_rule.public_constant_fields_rule.style    = pascal_case
dotnet_naming_rule.public_constant_fields_rule.severity = warning

# Fields that are public static readonly must be PascalCase
dotnet_naming_rule.public_static_readonly_fields_rule.symbols  = public_static_readonly_fields
dotnet_naming_rule.public_static_readonly_fields_rule.style    = pascal_case
dotnet_naming_rule.public_static_readonly_fields_rule.severity = warning

# No other types of fields are allowed by the .NET design guidelines
dotnet_naming_rule.match_all_fields_rule.symbols  = match_all_fields
dotnet_naming_rule.match_all_fields_rule.style    = invalid_style
dotnet_naming_rule.match_all_fields_rule.severity = error